from math import ceil, floor, sqrt
from decimal import Decimal, getcontext


'''
Returns two multiples of N, if N is a composite of 
primes n and m then those primes are returned, else
the two most similar composite factors of N are 
returned.

Note: A prime number being passed results in 1 and 
itself.
'''
def primeFactors(N, printRes = False):
    N = Decimal(N)                      # Convert N to Decimal object to handle large inputs
    getcontext().prec = len(str(N)) + 1 # Ensure Python does not round off large inputs

    x = ceil(N.sqrt())
    diff = x**2 - N
    sqrtDiff = diff.sqrt()
    while(sqrtDiff != floor(sqrtDiff)):
        x += 1
        diff = x**2 - N
        sqrtDiff = diff.sqrt()

    n = x - sqrtDiff
    m = x + sqrtDiff

    if(printRes):
        print('The factors for ' + str(int(N)) + ' are ' + str(int(n)) + ' and ' + str(int(m)))
        
    return int(n), int(m)

primeFactors(77, True)
primeFactors(1189, True)

n = 703736009777184023089624814294592409249277452625745332757748389922801741403132753895424956388387034273861704174435411451253765105079397120958872187527398178629501434078067418714846607682059069798574406610333331388412522990466355618040442382555614571786326428324677722983316749811853794357411141610435300835386989472811731560202124433559716440618403774406013112724584220666211501545924520442351542797557629270882264182262005277582509037749501382261242519580373623050239858729306403575493062068246361660464431979222255286607177960552377520641931539650418675636738331810407143618482992844547670928974936038951567591528689023958925930857444803834201333363376485052184620872889976780466254428553439326683400737459946435445593167513822561889035880970220242237069795421833351399207596652040975400934759313225795135579755501187953271972597453681198882579090204178585215287291128291110497463202519470201521012255346320401213138901745855375111052643539718441410622424114206107789488912852766791798855906045884856454704957417500685987772512583255259911585029407993906476766807934996126540649568231570427533042648522136731360700442868001677815651284172283032729991844273236080808533814706814347892524707596928320194541093041196237541235754131565001286529442097533010993332274753475164907081277593568535475735846774649645188856866582618499030996908221048617440884036154806159447069312189918666178038168493756063956322568654581292026356942576777674401491911993160011587476368132603769857122827694441114589377735188136577158997288097400387415593039493742349900999917416339191569148022297814267386646597161755033838324679066071697660770109424139573271436929490258114997312489358472097843465912273664589193790754874872512531941492741145661954418635997635982414399332697159732503564918580521581852160127571638611583772047152781166724863022075936386109233395296548429297337277979146145176725745354660866968636001098018589065377960432288188206692610473041446848821335988052720452836189759496014996945725919863842649590247
n, m = primeFactors(n, True)
#print('The prime factors for N are', n, 'and', m)
